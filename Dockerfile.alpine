ARG ARCH=arm64v8
ARG NODE_VERSION=12.22.1
ARG OS=alpine

FROM ${ARCH}/node:${NODE_VERSION}-${OS}

LABEL org.label-schema.build-date=${BUILD_DATE} \
    org.label-schema.docker.dockerfile=".docker/Dockerfile.arm" \
    org.label-schema.license="Apache-2.0" \
    org.label-schema.name="EdgeGateway" \
    org.label-schema.version=${BUILD_VERSION} \
    org.label-schema.description="Edge Computing - Edge Gateway Service" \
    org.label-schema.url="https://github.com/sinny777/edge-computing" \
    org.label-schema.vcs-ref=${BUILD_REF} \
    org.label-schema.vcs-type="Git" \
    org.label-schema.vcs-url="https://github.com/sinny777/edge-computing" \
    org.label-schema.arch=${ARCH} \
    authors="Gurvinder Singh <sinny777@gmail.com>"

USER root

# Updates and adds system required packages
RUN apk --no-cache add \
      bash \
      g++ \
      ca-certificates \
      lz4-dev \
      musl-dev \
      cyrus-sasl-dev \
      openssl-dev \
      make \
      python

# Install Build tools
# RUN apk add --no-cache --virtual buildtools build-base linux-headers udev python
RUN apk add --no-cache --virtual .build-deps gcc zlib-dev libc-dev bsd-compat-headers py-setuptools bash

RUN mkdir -p /usr/src/node-red
WORKDIR /usr/src/node-red

COPY package.json .
RUN npm install --unsafe-perm --no-update-notifier --no-fund --only=production \
    && npm uninstall node-red-node-gpio
# RUN npm i -g @loopback/build@6.1.1

COPY flows.json .
COPY settings.js .
ADD config /data
ADD certs ./certs

RUN export OPENSSL_ROOT_DIR=/usr/local/opt/openssl && \
    export LDFLAGS="-L$OPENSSL_ROOT_DIR/lib -L/usr/local/opt/gsas/lib" && \
    export CPPFLAGS="-I$OPENSSL_ROOT_DIR/include" && \
    export OPENSSL_INCLUDE_DIR=$OPENSSL_ROOT_DIR/include

# Env variables
ENV FLOWS=flows.json \
    TZ=Asia/Kolkata

ENV HOST=0.0.0.0 PORT=1880
# Expose the listening port of node-red
EXPOSE 1880

ENTRYPOINT ["npm", "start", "--cache", "/data/.npm", "--", "--userDir", "/data"]
